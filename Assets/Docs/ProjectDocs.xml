<?xml version="1.0" encoding="utf-8" ?>
<ProjectDocs>
	<ClassMember name="Block">
		<summary>
			Represents a Tetris block in the game.
			Each block has a position, rotation and an ID.

			Position is defined by the <see cref="Tiles"/> array and the <see cref="CurrentOffset"/> vector.

			<see cref="Tiles"/> contains relative positions of the block’s tiles for each axis and rotation within a bounding box.
			<see cref="CurrentOffset"/> determines the block’s position offset from the game board origin.

			The <see cref="Id"/> distinguishes the block from other blocks.
		</summary>
	</ClassMember>
	
	<ClassMember name="IBlock">
		<summary>
			Class representing the "I" <see cref="Block"/> (light blue color).
		</summary>
	</ClassMember>
	
	<ClassMember name="JBlock">
		<summary>
			Class representing the "J" <see cref="Block"/> (dark blue color).
		</summary>
	</ClassMember>
	
	<ClassMember name="LBlock">
		<summary>
			Class representing the "L" <see cref="Block"/> (orange color).
		</summary>
	</ClassMember>
	
	<ClassMember name="OBlock">
		<summary>
			Class representing the "O" <see cref="Block"/> (yellow color).
		</summary>
	</ClassMember>
	
	<ClassMember name="SBlock">
		<summary>
			Class representing the "S" <see cref="Block"/> (green color).
		</summary>
	</ClassMember>
	
	<ClassMember name="TBlock">
		<summary>
			Class representing the "T" <see cref="Block"/> (purple color).
		</summary>
	</ClassMember>
	
	<ClassMember name="ZBlock">
		<summary>
			Class representing the "Z" <see cref="Block"/> (green color).
		</summary>
	</ClassMember>

	<ClassMember name="ZBlock">
		<summary>
			Class representing the "Z" <see cref="Block"/> (green color).
		</summary>
	</ClassMember>
	
	<ClassMember name="AdjustKeyEvents">
		<summary>
			Class handling key events related to rotation of the game board.
			When the board is rotated, the keys that control the block movements (UpArrow, DownArrow, LeftArrow and RightArrow by default)
			have to be adjusted to the new orientation of the board.
		</summary>
	</ClassMember>

	<ClassMember name="BlockEvents">
		<summary>
			Class handling powerup intialization related events after the current block has been placed.
			When the block is placed, the PowerUpManager searches for all powerups on the board and checks whether they intersect with the newly placed block.
			If they do, the powerup is activated and the corresponding event is triggered.
		</summary>
	</ClassMember>

	<ClassMember name="DelayManager">
		<summary>
			Handles the falling delay of the current block.
			The delay detemines how fast the block falls (it decreases with the level and score -> more progress means faster falling block)
		</summary>
	</ClassMember>

	<ClassMember name="FileManager">
		<summary>
			Handles the file saving and loading.
		</summary>
	</ClassMember>

	<ClassMember name="HintData">
		<summary>
			Class reprsenting the hint data that are shown to player.
			It is used while saving/loading the actual data to/from the file.
		</summary>
	</ClassMember>

	<ClassMember name="KeySettings">
		<summary>
			Class reprsenting the key settings data.
			It is used while saving/loading the actual data to/from the file.
		</summary>
	</ClassMember>

	<ClassMember name="OptionsSettings">
		<summary>
			Class reprsenting the options data.
			It is used while saving/loading the actual data to/from the file.
		</summary>
	</ClassMember>

	<ClassMember name="KeyManager">
		<summary>
			Manages players key inputs.
		</summary>
	</ClassMember>
	
	<ClassMember name="OptionsManager">
		<summary>
			Manages players saved options.
		</summary>
	</ClassMember>

	<ClassMember name="BlockHolder">
		<summary>
			Holds and generates new blocks.
		</summary>
	</ClassMember>

	<ClassMember name="Game">
		<summary>
			Stores the fundamental game data and handles the game logic.
			It mostly contains methods that control block movements.
		</summary>
	</ClassMember>

	<ClassMember name="GameGrid">
		<summary>
			Represents the 3D game grid. It is used to store and manage placed blocks.
		</summary>
	</ClassMember>
	
	<ClassMember name="PowerUpHolder">
		<summary>
			Holds and generates new powerups.
		</summary>
	</ClassMember>
	
	<ClassMember name="Score">
		<summary>
			Handles score calculation and tracking during the game.
		</summary>
	</ClassMember>

	<ClassMember name="PowerUp">
		<summary>
			Class representing a powerup.
			Each powerup has a position, title an ID and description. It contains a Use method that is called when the powerup is activated.
			
			<see cref="Position"/> is a 3D vector. It tells us where the powerup is located in 3D space.
			<see cref="Id"/> is a unique identifier that distinguishes the powerup from other powerups.
			<see cref="Title"/> is the main title that is displayed when the powerup is collected.
			<see cref="Description"/> is the text explaining the powerup's effect. It is displayed when the powerup is collected.
		</summary>
	</ClassMember>

	<ClassMember name="AutoNextBlock">
		<summary>
			<see cref="PowerUp"/> that instantly replaces the current block with the next one.
		</summary>
	</ClassMember>

	<ClassMember name="BlindPlayer">
		<summary>
			<see cref="PowerUp"/> that temporarily obscures the player's vision, making it harder to see the game area.
		</summary>
	</ClassMember>

	<ClassMember name="BlockFreezer">
		<summary>
			<see cref="PowerUp"/> that temporarily freezes the current block, preventing any movement or rotation.
		</summary>
	</ClassMember>

	<ClassMember name="Bomb">
		<summary>
			<see cref="PowerUp"/> that destroys all blocks located within the defined <see cref="blastRadiusPositions"/> around the activation point.
		</summary>
	</ClassMember>

	<ClassMember name="ClearColumn">
		<summary>
			<see cref="PowerUp"/> that clears all blocks in the column aligned with the powerup's current x and z position.
		</summary>
	</ClassMember>

	<ClassMember name="ClearLine">
		<summary>
			<see cref="PowerUp"/> that clears all blocks in the highest non-empty line of the grid.
		</summary>
	</ClassMember>

	<ClassMember name="DoubleScore">
		<summary>
			<see cref="PowerUp"/> that clears all blocks in the highest non-empty line of the grid.
		</summary>
	</ClassMember>

	<ClassMember name="InstaDrop">
		<summary>
			<see cref="PowerUp"/> that instantly drops the current block to the lowest possible position
			and immediately spawns the next block.
		</summary>
	</ClassMember>

	<ClassMember name="DoubleScore">
		<summary>
			<see cref="PowerUp"/> that temporarily doubles the score earned by the player for a limited duration.
		</summary>
	</ClassMember>

	<ClassMember name="LimitMovement">
		<summary>
			<see cref="PowerUp"/> that temporarily restricts the player's movement, allowing only downward movement and rotation.
		</summary>
	</ClassMember>

	<ClassMember name="SlowDown">
		<summary>
			<see cref="PowerUp"/> that temporarily slows down the falling speed of the current block.
		</summary>
	</ClassMember>

	<ClassMember name="SpeedUp">
		<summary>
			<see cref="PowerUp"/> that temporarily speeds up the falling speed of the current block.
		</summary>
	</ClassMember>

	<ClassMember name="MusicController">
		<summary>
			Controls background music playback within the game.
			Manages music tracks, volume, and playback state.
		</summary>
	</ClassMember>

	<ClassMember name="SoundEffects">
		<summary>
			Manages playback of sound effects using an audio source pool to allow overlapping sounds.
		</summary>
	</ClassMember>

	<ClassMember name="BackgroundFace">
		<summary>
			Represents a 2D face of a 3D background grid, drawn as a flat mesh with a grid overlay.
		</summary>
	</ClassMember>
	
	<ClassMember name="BackgroundManager">
		<summary>
			Manages the background environment for a 3D scene, including faces of the background grid,
			camera positions, and rotations based on camera orientation.
		</summary>
	</ClassMember>

	<ClassMember name="TilePoolManager">
		<summary>
			Manages pools of reusable tile GameObjects to optimize performance by reducing
			the overhead of frequent instantiation and destruction.
		</summary>
	</ClassMember>

	<ClassMember name="TilePoolConfig">
		<summary>
			Serializable configuration class that defines
			a prefab and the initial number of instances to pool.
		</summary>
	</ClassMember>

	<ClassMember name="PooledTile">
		<summary>
			Component attached to pooled tile GameObjects to track
			which prefab they originated from.
		</summary>
	</ClassMember>

	<ClassMember name="KeyBinding">
		<summary>
			Abstract base class for keybinding UI management.
			Handles the flow of reassigning keys, saving, resetting to default,
			and navigating between confirmation dialogs in the settings menu.
		</summary>
	</ClassMember>

	<ClassMember name="InGameKeyBinding">
		<summary>
			Handles keybinding UI and related logic while in game.
			Inherits from the base <see cref="KeyBinding"/> class and extends it.
		</summary>
	</ClassMember>

	<ClassMember name="MenuKeyBinding">
		<summary>
			Handles keybinding UI and related logic when inside the main menu.
			Inherits from the base <see cref="KeyBinding"/> class and extends it.
		</summary>
	</ClassMember>

	<ClassMember name="Options">
		<summary>
			Abstract base class for managing settings options UI in the application.
			Handles applying settings to UI, listening to user changes, saving, resetting, and confirmation dialogs.
		</summary>
	</ClassMember>

	<ClassMember name="InGameOptions">
		<summary>
			Manages the options related logic while in game.
			Inherits from the base <see cref="Options"/> class and extends it.
		</summary>
	</ClassMember>

	<ClassMember name="MenuOptions">
		<summary>
			Manages the options related logic while inside the main menu.
			Inherits from the base <see cref="Options"/> class and extends it.
		</summary>
	</ClassMember>

	<ClassMember name="Settings">
		<summary>
			Manages the main settings UI, contains references to Options, Key Bindings, and Menu screens.
		</summary>
	</ClassMember>

</ProjectDocs>
